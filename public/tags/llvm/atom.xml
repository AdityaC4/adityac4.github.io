<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - LLVM</title>
    <link rel="self" type="application/atom+xml" href="https://adityac4.github.io/tags/llvm/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://adityac4.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-18T00:00:00+00:00</updated>
    <id>https://adityac4.github.io/tags/llvm/atom.xml</id>
    <entry xml:lang="en">
        <title>My First LLVM Patch: Making AVX&#x2F;AVX512 Subvector Insert Intrinsics `constexpr`</title>
        <published>2025-09-18T00:00:00+00:00</published>
        <updated>2025-09-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://adityac4.github.io/blog/18-09-25-first-llvm-patch/"/>
        <id>https://adityac4.github.io/blog/18-09-25-first-llvm-patch/</id>
        
        <content type="html" xml:base="https://adityac4.github.io/blog/18-09-25-first-llvm-patch/">&lt;p&gt;Recently I had decided to contribute my first patch to LLVM — a small but surprisingly tricky update to enable &lt;code&gt;constexpr&lt;&#x2F;code&gt; support for AVX and AVX512 subvector insert intrinsics. The kind of patch where you think &quot;how hard can this be?&quot; and then two days later you&#x27;re debugging vector lanes in an interpreter VM you didn&#x27;t know existed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-why&quot;&gt;The Why&lt;&#x2F;h2&gt;
&lt;p&gt;The goal: make intrinsics like &lt;code&gt;_mm256_insertf128_ps&lt;&#x2F;code&gt; usable in &lt;code&gt;constexpr&lt;&#x2F;code&gt; functions. These are commonly used in high-performance SIMD code, and enabling them in constant evaluation can help optimize compile-time expressions, especially when building vector tables or reshuffling constants.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trying-it&quot;&gt;Trying it&lt;&#x2F;h2&gt;
&lt;p&gt;I started with the most scientific approach available: I wrote a test case and waited for it to fail.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; __m256 result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_mm256_insertf128_ps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_mm256_setzero_ps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_mm_set1_ps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And thankfully it failed. The constant evaluator didn&#x27;t know what to do with the builtin, and the interpreter threw up its hands, gracefully.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-real-work&quot;&gt;The Real Work&lt;&#x2F;h2&gt;
&lt;p&gt;To fix this, I had to teach both:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ExprConstant.cpp&lt;&#x2F;code&gt;: Clang&#x27;s AST evaluator, used for folding during semantic analysis.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;InterpBuiltin.cpp&lt;&#x2F;code&gt;: the bytecode interpreter, which runs &lt;code&gt;constexpr&lt;&#x2F;code&gt; code on a tiny VM. (the future)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The logic is the same in both:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Take the base and subvector.&lt;&#x2F;li&gt;
&lt;li&gt;Check that their sizes are compatible.&lt;&#x2F;li&gt;
&lt;li&gt;Compute the insertion offset using the immediate operand.&lt;&#x2F;li&gt;
&lt;li&gt;Copy over the subvector lane into the base.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It’s not hard logic. But LLVM’s interpreters work at a pretty low level, and everything is abstracted (you deal with &lt;code&gt;APValue&lt;&#x2F;code&gt; and &lt;code&gt;Pointer&lt;&#x2F;code&gt; wrappers, type metadata, etc). Every copy feels like handling memory with oven mitts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;builtinsx86-td-the-treasure-map&quot;&gt;BuiltinsX86.td: The Treasure Map&lt;&#x2F;h2&gt;
&lt;p&gt;Adding a new builtin means updating &lt;code&gt;BuiltinsX86.td&lt;&#x2F;code&gt;. This file maps frontend-level intrinsics to backend builtins and includes type info, masks, variants, etc.&lt;&#x2F;p&gt;
&lt;p&gt;It took me a while to understand that I didn’t need to reimplement any masking behavior. I had assumed I would need to manually interpret the mask register (“if bit i is set, write lane i”), but it turns out Clang’s headers expand these into separate builtins entirely, and the mask is passed through as a normal argument. Huge relief.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-and-some-cleanup&quot;&gt;Testing (and some cleanup)&lt;&#x2F;h2&gt;
&lt;p&gt;Originally I wrote a new file: &lt;code&gt;avx-insert-constexpr.cpp&lt;&#x2F;code&gt;. But I was gently nudged by reviewers to follow the existing structure and add tests in the appropriate &lt;code&gt;clang&#x2F;test&#x2F;CodeGen&#x2F;X86&lt;&#x2F;code&gt; files.&lt;&#x2F;p&gt;
&lt;p&gt;So I did.&lt;&#x2F;p&gt;
&lt;p&gt;Over 40 new test cases, all using the &lt;code&gt;TEST_CONSTEXPR&lt;&#x2F;code&gt; macro to make sure the evaluation actually happens at compile time. Here&#x27;s a representative one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Yes, this is one line in the actual test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TEST_CONSTEXPR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;match_v16si&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_mm512_mask_inserti32x4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(((__m512i)(__v16si){&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x00F0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), ((__m512i)(__v16si){&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}), ((__m128i)(__v4si){&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simple, but satisfying.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;review-feedback&quot;&gt;Review Feedback&lt;&#x2F;h2&gt;
&lt;p&gt;Most of the comments were around naming (I had &lt;code&gt;DstVec&lt;&#x2F;code&gt;, &lt;code&gt;Dst&lt;&#x2F;code&gt;, &lt;code&gt;Result&lt;&#x2F;code&gt; all floating around with conflicting meanings) and LLVM&#x27;s legendary formatting rules. There&#x27;s a rule about 80 columns. It’s not just a suggestion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(SubElements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; BaseElements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(BaseElements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SubElements) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That became:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;assert(SubElements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; BaseElements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;       (BaseElements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; SubElements) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(The reviewers and the llvm bot &lt;em&gt;will&lt;&#x2F;em&gt; notice.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;merge&quot;&gt;Merge!&lt;&#x2F;h2&gt;
&lt;p&gt;Eventually, the reviewers signed off. CI passed. I rebased, squashed, and hit &quot;Mark as ready&quot;. A few hours later, it was merged.&lt;&#x2F;p&gt;
&lt;p&gt;🎉 First LLVM patch in!&lt;&#x2F;p&gt;
&lt;p&gt;PR: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;llvm&#x2F;llvm-project&#x2F;pull&#x2F;158778&quot;&gt;llvm&#x2F;llvm-project&#x2F;pull&#x2F;158778&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Issue: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;llvm&#x2F;llvm-project&#x2F;issues&#x2F;157709&quot;&gt;#157709&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;I learned more than I expected:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;About &lt;code&gt;constexpr&lt;&#x2F;code&gt;, sure. But also about Clang internals, how intrinsics flow through the frontend, and the lovely balance between AST and interpreter.&lt;&#x2F;li&gt;
&lt;li&gt;LLVM has a steep curve, but the community’s been welcoming and helpful. (Special thanks to @RKSimon and @tbaederr!)&lt;&#x2F;li&gt;
&lt;li&gt;It felt good to contribute something useful. Even if it&#x27;s &quot;just&quot; &lt;code&gt;constexpr&lt;&#x2F;code&gt; for a few AVX intrinsics, it&#x27;s a real feature used by real code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;media0.giphy.com&#x2F;media&#x2F;v1.Y2lkPTc5MGI3NjExeTg3YTY0MGZ0cnVsNDEwemg1bjM1dWV0ZGMyaWt4aWc4NjZja3c0dSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw&#x2F;BMR4cgypuglVu&#x2F;giphy.gif&quot; alt=&quot;fabulous cat&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
